import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;

public class MazeIII {
    public String find(int[][] maze, int[] ball, int[] hole){
        if(maze[ball[0]][ball[1]]==1||maze[hole[0]][hole[1]]==1)
            return "impossible";
        int m = maze.length;
        int[][] dis = new int[maze.length][maze[0].length];

        int[][] dirs = {{1,0},{0,-1},{0,1},{-1,0}};
        char[] ch = {'d','l','r','u'};
        for(int[] row:dis)
            Arrays.fill(row, Integer.MAX_VALUE);
        dis[ball[0]][ball[1]] = 0;
        Queue<int[] > queue = new LinkedList<>();

        HashMap<Integer,String> path = new HashMap<>();
        queue.add(ball);
        path.put(m*ball[0]+ball[1],"");
        while(!queue.isEmpty()){
            int[] s = queue.remove();
            for(int[] dir:dirs){
                int i = Arrays.asList(dirs).indexOf(dir);

                int x = s[0];
                int y = s[1];
                int count = 0;
                while(x>=0&&y>=0&&x<maze.length&&y<maze[0].length&&maze[x][y]==0){

                    if(x==hole[0]&&y==hole[1]&&dis[s[0]][s[1]]+count<=dis[x][y]) {

                        String str = (path.get(m * s[0] + s[1]) + ch[i]);

                        if(dis[s[0]][s[1]]+count==dis[x][y]) {

                            if((path.get(m * hole[0] + hole[1]).compareTo(str))>0){
                                path.put(m * hole[0] + hole[1], str);
                            }
                            break;
                        }
                        else {
                            dis[x][y] = dis[s[0]][s[1]]+count;
                            path.put(m * hole[0] + hole[1], str);
                        }


                    }
                    else {
                        x += dir[0];
                        y += dir[1];
                        count++;
                    }

                }

                if((x!=hole[0]||y!=hole[1])){
                    x -= dir[0];
                    y -= dir[1];
                    count--;
                    if(dis[s[0]][s[1]]+count<dis[x][y])
                    {
                        dis[x][y] = dis[s[0]][s[1]]+count;
                        queue.add(new int[]{x,y});
                        path.put(m*x+y,(path.get(m*s[0]+s[1]))+ch[i]);
                    }
                    else if(dis[s[0]][s[1]]+count==dis[x][y])
                    {

                        if((path.get(m *x + y).compareTo((path.get(m*s[0]+s[1]))+ch[i]))>0){
                            path.put(m *x + y, (path.get(m*s[0]+s[1]))+ch[i]);
                            queue.remove();

                        }
                    }
                }
            }
        }
        if(path.containsKey(m*hole[0]+hole[1]))
            return path.get(m*hole[0]+hole[1]);
        else
            return "impossible";
    }

    public static void main(String[] args){
        MazeIII m =new MazeIII();
        //int[][] maze = {{0,0,1,0,0},{0,0,0,0,0},{0,0,0,1,0},{1,1,0,1,1},{0,0,0,0,0}};
        //int[][] maze = {{0,0,0,0,0},{1,1,0,0,1},{0,0,0,0,0},{0,1,0,0,1},{0,1,0,0,0}};
        /*
        int[][] maze = {{0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0},
                        {0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1},
                        {0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0},
                        {1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0},
                        {0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0},
                        {0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1},
                        {0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0},
                        {0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0},
                        {0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
                        {0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1},
                        {0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0},
                        {1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0},
                        {0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0},
                        {0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1},
                        {0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0},
                        {1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0},
                        {0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0},
                        {0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1},
                        {0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0},
                        {1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0},
                        {0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0},
                        {0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1},
                        {0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0},
                        {1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0},
                        {0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0},
                        {0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1},
                        {0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0},
                        {1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0},
                        {0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0},
                        {0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0}};
        */
        /*
        int[][] maze = {{0,1,0,0,1,0,0,1,0,0},
                {0,0,1,0,0,1,0,0,1,0},
                {0,0,0,0,0,0,1,0,0,1},
                {0,0,0,0,0,0,1,0,0,1},
                {0,1,0,0,1,0,0,1,0,0},
                {0,0,1,0,0,1,0,0,0,0},
                {0,0,0,0,0,0,1,0,0,0},
                {1,0,0,1,0,0,0,0,0,1},
                {0,1,0,0,1,0,0,1,0,0},
                {0,0,0,0,0,1,0,0,1,0}};
                */
    int[][] maze = {{0,1,0,0,1,0,0,1,0,0},
                    {0,0,1,0,0,0,0,0,0,0},
                    {0,0,0,1,0,0,1,0,0,1},
                    {0,0,0,1,0,0,1,0,0,1},
                    {0,1,0,0,1,0,0,1,0,0},
                    {0,0,0,0,0,1,0,0,0,0},
                    {0,0,0,0,0,0,1,0,0,1},
                    {0,0,0,1,0,0,0,0,0,0},
                    {0,1,0,0,1,0,0,1,0,0},
                    {0,0,1,0,0,1,0,0,1,0}};

        /*
        int[] start = {2,4};
        int[] destination = {7,6};
        */
        int[] start = {1,5};
        int[] destination = {5,1};
        String path  = m.find(maze,start,destination);
        System.out.println(path);
    }
}
